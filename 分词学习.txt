			
			搜索引擎分词学习

	一.倒排索引。
	
		搜索引擎之所以搜索文本快，它并不是全文本搜索的，而是使用分词，倒排索引的技术来实现快速查找的。
		
		把一个文本拆分成一个个单词然后定好单词的id编号，然后再文档对应的信息存储 单词的编号，出现频率以及在文本中的单词位置。
	
		比如 一个文本是  今天天气太热，我不想出门 倒排列表
		
		对应的文档 编号为1
		文档编号           文档内容
		  1		  今天天气太热，我不想出门

		  2               今天天气凉爽，出门打球



		单词id          单词                       倒排列表
		  1		 今天                      （1;1;<1>）,(2;1;<1>)
		  2		 天气			    (1;1;<2>), (2;1,<2>)
		  3		 太热			    (1;1;<3>)
		  4		 我			    (1;2;<4>)
		  5		 不想			    (1;1;<5>)
		  6		 出门			    (1;1;<6>),(2,1,<4>)
		  7              凉爽			    (2;1;<3>)
		  8              打球			    (2;1;<5>)

	二.单词词典

		单词词典是倒排索引中非常重要的组成部分，用来维护文档集合中出现的所有单词的相关信息，同事记载某个单词对应的倒排列表在倒排文件的位置信息。
	在支持搜索是，根据用户的查询词，去单词字典里查询，能够获得对应的倒排索引。
		需要高效的数据结构对单词词典进行构建和查找，常用的数据结构包括哈希加链表结构和属性词典结构

		1.hash加链表
			原理与HashMap比较类似，每个Hash表项保存一个指针，指针指向冲突链表，在冲突链表里相同hash值的单词形成链表结构，之所以使用链表，是因为
		会有相同hash值的单词，链表存hash 值 和单词值。如果hash值相同而值不同则加入链表，反之则表明已存在不加入链表。
			搜索的时候也是一样的，先根据单词值的hash值找到链表，然后再根据hash值和 单词来判断单词是否存在 找到单词，不存在则搜索为空

		2.树形结构
			B树（或称B+树），字典项能够按照大小排序，hash 方式不用满足。B树形成了层级查找结构，中间节点用于指定一定殊勋范围的单词项目储存在哪个子
		树中，起到根据字典项比较大小进行导航作用，最底层的叶子节点存储单词的地址信息，根据这个地址，提取出单词字符串
			













































		
	

	数据库连接池

	一.为什么要使用连接池
		数据库连接资源是一种有限和昂贵的资源，一个数据库连接对象对应一个物理数据库连接，每次操作都打开一个物理连接，使用完后关闭
   	这样的话性能太过低下。使用数据库连接池的解决方案是在应用启动时建立足够的数据库连接，并将这些连接组成一个连接池，然后程序启动的时
	候对连接池进行申请，使用和释放。对于多余连接池中连接数的并发请求，应该在队列中排队。并且可以更具翅中的连接使用率，动态增加或者减
	少池中的连接数。
		连接池技术尽可能多的重用了消耗内存的资源，大大介绍了内存。提高了服务器的效率，能够支持更多的客户支持，通过使用连接池，大
	大提高了程序的运行效率，同时我们也可以通过其自身的管理机制数据库连接的数量。
		
		基本原理就是建立一个缓冲池，预先在缓冲池中放入一定数量的连接，当需要连接的时候，从池中取出一个，使用完之后放回。可以设置
	一个最大连接数来防止建立无尽的数据库连接，防止数据库爆了。

		工作原理，主要分三部分，池的建立，池中连接的使用管理，连接池的关闭。
		1.池的建立，在系统初始化的时候，根据系统配置建立，在池中创建了几个连接对象，以便使用时能从池中获取。连接池中的连接不能随意
		创建和关闭，这样避免了连接的随意创建和关闭造成的系统开销。可以使用Vector，Stack来管理

		2.连接池的管理。这个是连接池机制的核心，管理机制如下
		当需要建立连接的时候，先查看连接池中是否有空闲的连接，如果存在空闲连接，则将连接分配个这个请求，如果没有空闲的请求的话，则
		查看当前的连接数是否已经达到了最大的连接数，如果没有的话就创建新的连接分配给请求，如果超过了设定的最大等待时间就抛出异常给
		客户。
		
		当客户释放数据库连接时，先判断该连接的引用次数是否超过了规定值，如果超过了就从连接池中删除，否则保留为其他请求使用这样就可以
		保证有效复用，避免频繁的建立，释放连接带来的系统开销。

		最后是连接池的关闭。当应用程序退出时，关闭所有的连接，释放连接池中的相关资源。

	二.连接池关键问题分析

		1.并发问题
			为了是连接管理具有最大的通用性，必须考虑多线程，并发问题。可以使用sychronized关键字来保证线程同步，mybatis中就是这么
		做的  synchronized (this.state) 锁住state 这个对象其他线程必须等待。

		2.事务处理
		java.sql Connection 类本身提过了对事务的支持，可以通过设置Connection的AutoCommit属性为false，然后显式的调用commit或rollback方法
		来实现。如果要高效的进行Connection 复用，就必须提供相应的事务支持，可以采用每个事务独占一个连接实现。

		3.连接池的分配和释放
		合理的分配和释放，可以提高连接的复杂度，从而降低建立新的连接的开销，同时还可以加快用户的访问速度。
		使用空闲池来管理创建但尚未分配出去的连接，按照创建时间存放到一个空闲池中。每当用户请求连接时，先检查空闲池内有没有空闲的连接。如果
		有的话，就把建立时间最长的那个连接分配给请求，如果可用就分配给他，不可用的话就从池中删除。如果没有空闲的连接，就判断连接数有没有超
		过设置的最大连接数，如果没有的话就建立一个连接，如果达到的话，就等待一定时间，如果在等待时间内有连接被释放的话就把这个连接分配个请求
		，如果等待时间超过了预定时间，则返回null，系统对分配出去的连接只做技术，当使用完之后返回给空闲池，对于空闲池的连接状态，可用专门的
		线程监控。

		4.连接池的配置和维护
		系统可以设置最小连接数，和最大连接数。最小连接数太大的话系统启动会很慢，如果设的太小的话，启动会很快但相应比价慢，一般来说开发的时候
		小一些，生产环境大一些。最大连接数需要根据系统的访问量来设置。
		
























































































































